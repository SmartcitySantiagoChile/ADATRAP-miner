<powershell>
# function to make logs
function Write-LogsEntry
{
  [CmdletBinding()]
  Param(
    [Parameter(Mandatory=$true)]
    [string] $LogGroupName,
    [Parameter(Mandatory=$true)]
    [string] $LogStreamName,
    [Parameter(Mandatory=$true)]
    [string] $LogString
  )

  #Determine if the LogGroup Exists
  If (-Not (Get-CWLLogGroup -LogGroupNamePrefix $LogGroupName)){
    New-CWLLogGroup -LogGroupName $logGroupName
    #Since the loggroup does not exist, we know the logstream does not exist either
    $CWLSParam = @{
      LogGroupName = $logGroupName
      LogStreamName = $logStreamName
    }
    New-CWLLogStream @CWLSParam
  }
  #Determine if the LogStream Exists
  If (-Not (Get-CWLLogStream -LogGroupName $logGroupName -LogStreamName $LogStreamName)){
    $CWLSParam = @{
      LogGroupName = $logGroupName
      LogStreamName = $logStreamName
    }
    New-CWLLogStream @CWLSParam
  }

  $logEntry = New-Object -TypeName 'Amazon.CloudWatchLogs.Model.InputLogEvent'
  $logEntry.Message = $LogString
  $logEntry.Timestamp = (Get-Date).ToUniversalTime()
  #Get the next sequence token
  $SequenceToken = (Get-CWLLogStream -LogGroupName $LogGroupName -LogStreamNamePrefix $logStreamName).UploadSequenceToken

  #There will be no $SequenceToken when a new Stream is created to we adjust the parameters for this
  if($SequenceToken){
    $CWLEParam = @{
      LogEvent      = $logEntry
      LogGroupName  = $logGroupName
      LogStreamName = $logStreamName
      SequenceToken = $SequenceToken
    }
    Write-CWLLogEvent @CWLEParam
  }else{
    $CWLEParam = @{
      LogEvent      = $logEntry
      LogGroupName  = $logGroupName
      LogStreamName = $logStreamName
    }
    Write-CWLLogEvent @CWLEParam
  }
}
$logGroupName = "{GROUP_NAME}"
$logStreamName = Get-EC2InstanceMetadata -Category InstanceId

echo $logGroupName
echo $logStreamName

# change time zone to America/Santiago
$log_message = tzutil /s "Pacific SA Standard Time"

# get env data and date
$env_data = "{ENV_DATA}"
$ec2_date = "{EC2_DATE}"

# download dependencies
# download chocolatey
$script = New-Object Net.WebClient
$script | Get-Member
$script.DownloadString("https://chocolatey.org/install.ps1")
iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex
refreshenv
choco upgrade chocolatey
refreshenv

# download python
choco install -y python --version=3.8.0
refreshenv
C:\Python38\python.exe -V
C:\Python38\python.exe -m pip install --upgrade pip

# download git and install project
choco install -y git
cd C:\
."C:\Program Files\Git\bin\git.exe" clone https://github.com/SmartcitySantiagoChile/ADATRAP-miner.git
cd C:\ADATRAP-miner
."C:\Program Files\Git\bin\git.exe" checkout --track origin/develop
C:\Python38\python.exe -m pip install -r requirements.txt
C:\Python38\python.exe -m pip install --editable .

# create .env
$PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
echo $env_data > .env

# run windows miner
C:\Python38\python.exe windows_miner.py $ec2_date
echo "Instalaciones correctas"
</powershell>